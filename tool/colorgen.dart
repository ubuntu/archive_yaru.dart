import 'dart:io';

import 'package:code_builder/code_builder.dart';
import 'package:dart_style/dart_style.dart';

const shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];

int calculateShade(int value, int shade) {
  final ds = (500 - shade) / 1000.0;
  return value + ((ds < 0 ? value : (255 - value)) * ds).round();
}

extension Color on String {
  static String fromArgb(int a, int r, int g, int b) {
    return '0x${a.toHex()}${r.toHex()}${g.toHex()}${b.toHex()}';
  }

  int get a => _parse(0);
  int get r => _parse(1);
  int get g => _parse(2);
  int get b => _parse(3);

  int _parse(int i) {
    final hex = this.startsWith('0x') ? this.substring(2) : this;
    final sub = hex.padLeft(8, 'F').substring(i * 2, (i + 1) * 2);
    return int.parse(sub, radix: 16);
  }

  String toHex() => '0x${a.toHex()}${r.toHex()}${g.toHex()}${b.toHex()}';
}

extension Hex on int {
  String toHex() => toRadixString(16).padLeft(2, '0').toUpperCase();
}

Map<int, String> createSwatch(String color) {
  return {
    for (final shade in shades)
      shade: Color.fromArgb(
        color.a,
        calculateShade(color.r, shade),
        calculateShade(color.g, shade),
        calculateShade(color.b, shade),
      ),
  };
}

// "Color(0xAARRGGBB)"
String formatColor(String color) {
  return 'Color(${color.toHex()})';
}

// "{50: Color(0xAARRGGBB), ...}"
String formatSwatch(Map<int, String> swatch) {
  return swatch.map((k, v) => MapEntry(k, formatColor(v))).toString();
}

// "MaterialColor(0xAARRGGBB, {50: Color(0xAARRGGBB), ...})"
String formatMaterialColor(String color, Map<int, String> swatch) {
  return 'MaterialColor(${color.toHex()}, ${formatSwatch(swatch)})';
}

Spec generate(String name, String color) {
  return Class((b) => b
    ..name = 'YaruColors'
    ..docs.add(
        '// Copy and paste `YaruColors.$name` to `lib/src/colors/yaru_colors.dart`')
    ..fields.add(Field((b) => b
      ..docs.add('// Generated by tool/colorgen.dart')
      ..name = name
      ..static = true
      ..modifier = FieldModifier.constant
      ..assignment =
          Code('${formatMaterialColor(color, createSwatch(color))}'))));
}

void main(List<String> args) {
  if (args.length != 2) {
    print('''
Usage: dart run tool/colorgen.dart <name> <value>

For example, dart run tool/colorgen.dart blue 0xFF0073E5
''');
    exit(-1);
  }

  final lib = Library((b) => b..body.add(generate(args.first, args.last)));
  print(DartFormatter().format('${lib.accept(DartEmitter())}'));
}
