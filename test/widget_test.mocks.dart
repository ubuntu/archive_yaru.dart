// Mocks generated by Mockito 5.1.0 from annotations
// in yaru/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dbus/dbus.dart' as _i2;
import 'package:gsettings/src/gsettings.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDBusValue_0 extends _i1.Fake implements _i2.DBusValue {}

/// A class which mocks [GSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockGSettings extends _i1.Mock implements _i3.GSettings {
  MockGSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get schemaName =>
      (super.noSuchMethod(Invocation.getter(#schemaName), returnValue: '')
          as String);
  @override
  _i4.Stream<List<String>> get keysChanged => (super.noSuchMethod(
      Invocation.getter(#keysChanged),
      returnValue: Stream<List<String>>.empty()) as _i4.Stream<List<String>>);
  @override
  _i4.Future<List<String>> list() =>
      (super.noSuchMethod(Invocation.method(#list, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i4.Future<List<String>>);
  @override
  _i4.Future<_i2.DBusValue> get(String? name) =>
      (super.noSuchMethod(Invocation.method(#get, [name]),
              returnValue: Future<_i2.DBusValue>.value(_FakeDBusValue_0()))
          as _i4.Future<_i2.DBusValue>);
  @override
  _i4.Future<_i2.DBusValue> getDefault(String? name) =>
      (super.noSuchMethod(Invocation.method(#getDefault, [name]),
              returnValue: Future<_i2.DBusValue>.value(_FakeDBusValue_0()))
          as _i4.Future<_i2.DBusValue>);
  @override
  _i4.Future<bool> isSet(String? name) =>
      (super.noSuchMethod(Invocation.method(#isSet, [name]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> set(String? name, _i2.DBusValue? value) =>
      (super.noSuchMethod(Invocation.method(#set, [name, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> unset(String? name) =>
      (super.noSuchMethod(Invocation.method(#unset, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setAll(Map<String, _i2.DBusValue?>? values) =>
      (super.noSuchMethod(Invocation.method(#setAll, [values]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
